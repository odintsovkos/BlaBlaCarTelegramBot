from aiogram.types import Message, ReplyKeyboardRemove
from utils.db_api import db
from keyboards.inline import message_keyboard
from loader import dp
from utils.notify_admins import admins_notify
import datetime


def title_message(count):
    if count == 1:
        count = "–æ–¥–Ω–∞"
        text = f"<u>–ù–∞–π–¥–µ–Ω–∞ {count} –¥–æ—Å—Ç—É–ø–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞</u>üîç"
    elif 5 <= count <= 20:
        text = f"<u>–ù–∞–π–¥–µ–Ω–æ {count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫</u>üîç"
    else:
        text = f"<u>–ù–∞–π–¥–µ–Ω–æ {count} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–∫–∏</u>üîç"
    return text


def trip_message(num, response_api):
    from_location = response_api['waypoints'][0]['place']['city']
    to_location = response_api['waypoints'][1]['place']['city']
    distance = int(response_api['distance_in_meters'] / 1000)
    time_to_go = response_api['waypoints'][0]['date_time'].split('T')[1][:5]
    time_to_end = response_api['waypoints'][1]['date_time'].split('T')[1][:5]
    price = response_api['price']['amount'].split('.')[0]
    try:
        auto = f"{response_api['vehicle']['make']} {response_api['vehicle']['model']}"
    except Exception:
        auto = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω"

    text = f"<u><b>–ü–æ–µ–∑–¥–∫–∞ ‚Ññ{num + 1}</b></u>üöå\n" \
           f"<i><b>{from_location} --> {to_location}, {distance} –∫–º</b></i>\n" \
           f"<code>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤</code> {time_to_go}\n" \
           f"<code>–ü—Ä–∏–±—ã—Ç–∏–µ –≤</code> {time_to_end}\n" \
           f"<code>–°—Ç–æ–∏–º–æ—Å—Ç—å:</code> <b>{price}</b> —Ä—É–±.\n" \
           f"<code>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</code>\n" \
           f"{auto}"

    return text


async def validation_response(message, response_api, status):
    if status == 200:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–µ–∑–¥–∫–∏
        if response_api['search_info']['count'] > 0:
            return True
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –ü–æ–µ–∑–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        else:
            await message.answer("–ü–æ–µ–∑–¥–æ–∫ –Ω–∞ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            await admins_notify(dp, f'{message.from_user.id}, {message.from_user.username}\n'
                                    f'[INFO] –ü–æ–µ–∑–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                                    f'Time: {datetime.datetime.now()}')
            return False

    # Status code –Ω–µ 200, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ BlaBlaCar")
        print(f"Status code: {status}\n", response_api)

        await admins_notify(dp, f'{message.from_user.id}, {message.from_user.username}\n'
                                f'[ERROR] Server response status code {status}\n'
                                f'Time: {datetime.datetime.now()}')
        return False


async def preparation_message(message: Message, response_api_list, status):
    trips_list = []
    for response in response_api_list:
        if await validation_response(message, response, status):
            db.insert_data_to_database(message.from_user.id,
                                       message.from_user.first_name,
                                       message.from_user.last_name,
                                       message.from_user.username,
                                       response)
            for trip_num in range(len(response['trips'])):
                trips_list.append(response['trips'][trip_num])
    return trips_list


async def send_message(message, response_api_list, status):
    trips = await preparation_message(message, response_api_list, status)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫
    await message.answer(title_message(len(trips)))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–µ–∑–¥–∫–∞–º–∏
    for num in range(len(trips)):
        await message.answer(trip_message(num, trips[num]),
                             reply_markup=message_keyboard.create_inline_keyboard(num, trips[num]))

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥–∞–Ω–Ω—ã–º –ë–æ—Ç–æ–º", reply_markup=ReplyKeyboardRemove())
